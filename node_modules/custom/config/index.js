'use strict'

const fs = require('fs')
const validator = require('validator')
const stripJsonComments = require('strip-json-comments')

const utils = require('../utils')

/* Used solely in debugging */
const log = utils.log  // eslint-disable-line no-unused-vars


/*
  Returns a valid configuration JSON out of 'fileName' or 'node index --config_file_name=dev_config.json' or from default file.
  In case of error of the file, will throw a (hopefully) meaningful message.
  Returned object is frozen using the 'utils.recursiveFreezeObject()' function
*/
function getConfig (fileName) {
  /* Secure always a string value for 'fileName' */
  if (typeof fileName !== 'string' ||
      !fileName.length
  ) {
    /* Try to guess the config file path from the starting arguments
       if same was not sent as an incoming arguments
       Example: 'node index --config_file_name=dev_config.json'
    */
    const config_args = utils.toString(process.argv[2]).split('=')
    if (config_args[0] === '--config_file_name' &&
        config_args[1] &&
        typeof config_args[1] === 'string'
    ) {
      fileName = config_args[1]
    } else {
      fileName = 'default_config.json'
    }
  }

  {
    /* Any delayed tick above 1 year is useless */
    const MAX_VALID_TIMEOUT = 1 * 365 * 24 * 60 * 60 * 100

    /* Set a custom rule to determine a common timeout limits */
    validator.extend('isTimeout', function (test) {
      return validator.isInt(`${test}`) &&
             test * 1 >= 1 &&
             test * 1 <= MAX_VALID_TIMEOUT
    })
  }

  try {
    let filePath = `${__dirname}/${fileName}`
    try {
      fs.accessSync(filePath)
    } catch (error) {
      throw new Error(`Unable to access config "${filePath}": ${error.stack}`)
    }

    /* Will run a series of tests so all valid fields from 'configUntested' will be set into 'config' */
    let config = {}
    let configUntested
    try {
      configUntested = JSON.parse(stripJsonComments(fs.readFileSync(filePath, 'utf8')))
    } catch (error) {
      throw new Error(`Config file "${filePath}" have invalid JSON: ${error.stack}`)
    }

    {
      const validEnvironments = [
        'test',
        'prod',
        'production',
        'dev',
        'develop',
        'development',
        'stage',
        'staging'
      ]

      if (!~validEnvironments.indexOf(configUntested.environment)) {
        throw new Error(`Config file "${filePath}" have invalid property {string} "environment" = {${typeof configUntested.environment}} "${utils.toString(configUntested.environment)}". Valid environments are ["${validEnvironments.join('", "')}"]`)
      }
      config.environment = configUntested.environment
    }

    if (!configUntested.database ||
        typeof configUntested.database !== 'object'
    ) {
      throw new Error(`Config file "${filePath}" have invalid property {object} "database" = {${typeof configUntested.database}} "${utils.toString(configUntested.database)}"`)
    }
    config.database = {}

    if (!configUntested.database.redis ||
        typeof configUntested.database.redis !== 'object'
    ) {
      throw new Error(`Config file "${filePath}" have invalid property {object} "database.redis" = {${typeof configUntested.database.redis}} "${utils.toString(configUntested.database.redis)}"`)
    }
    config.database.redis = {}

    if (!configUntested.database.redis.communicator ||
        typeof configUntested.database.redis.communicator !== 'object'
    ) {
      throw new Error(`Config file "${filePath}" have invalid property {object} "database.redis.communicator" = {${typeof configUntested.database.redis.communicator}} "${utils.toString(configUntested.database.redis.communicator)}"`)
    }
    config.database.redis.communicator = {}

    if (!configUntested.database.redis.communicator.address ||
        typeof configUntested.database.redis.communicator.address !== 'object'
    ) {
      throw new Error(`Config file "${filePath}" have invalid property {object} "database.redis.communicator.address" = {${typeof configUntested.database.redis.communicator.address}} "${utils.toString(configUntested.database.redis.communicator.address)}"`)
    }
    config.database.redis.communicator.address = {}

    if (!validator.isIP(configUntested.database.redis.communicator.address.ip)) {
      throw new Error(`Config file "${filePath}" have invalid property {IP} "database.redis.communicator.address.ip" = {${typeof configUntested.database.redis.communicator.address.ip}} "${utils.toString(configUntested.database.redis.communicator.address.ip)}"`)
    }
    config.database.redis.communicator.address.ip = configUntested.database.redis.communicator.address.ip

    if (!validator.isInt(`${configUntested.database.redis.communicator.address.port}`, {min: 0})) {
      throw new Error(`Config file "${filePath}" have invalid property {port} "database.redis.communicator.address.port" = {${typeof configUntested.database.redis.communicator.address.port}} "${utils.toString(configUntested.database.redis.communicator.address.port)}"`)
    }
    config.database.redis.communicator.address.port = configUntested.database.redis.communicator.address.port

    if (!configUntested.database.redis.archive ||
        typeof configUntested.database.redis.archive !== 'object'
    ) {
      throw new Error(`Config file "${filePath}" have invalid property {object} "database.redis.archive" = {${typeof configUntested.database.redis.archive}} "${utils.toString(configUntested.database.redis.archive)}"`)
    }
    config.database.redis.archive = {}

    if (!configUntested.database.redis.archive.address ||
        typeof configUntested.database.redis.archive.address !== 'object'
    ) {
      throw new Error(`Config file "${filePath}" have invalid property {object} "database.redis.archive.address" = {${typeof configUntested.database.redis.archive.address}} "${utils.toString(configUntested.database.redis.archive.address)}"`)
    }
    config.database.redis.archive.address = {}

    if (!validator.isIP(configUntested.database.redis.archive.address.ip)) {
      throw new Error(`Config file "${filePath}" have invalid property {IP} "database.redis.archive.address.ip" = {${typeof configUntested.database.redis.archive.address.ip}} "${utils.toString(configUntested.database.redis.archive.address.ip)}"`)
    }
    config.database.redis.archive.address.ip = configUntested.database.redis.archive.address.ip

    if (!validator.isInt(`${configUntested.database.redis.archive.address.port}`, {min: 0})) {
      throw new Error(`Config file "${filePath}" have invalid property {port} "database.redis.archive.address.port" = {${typeof configUntested.database.redis.archive.address.port}} "${utils.toString(configUntested.database.redis.archive.address.port)}"`)
    }
    config.database.redis.archive.address.port = configUntested.database.redis.archive.address.port

    if (!configUntested.manager ||
        typeof configUntested.manager !== 'object'
    ) {
      throw new Error(`Config file "${filePath}" have invalid property {object} "manager" = {${typeof configUntested.manager}} "${utils.toString(configUntested.manager)}"`)
    }
    config.manager = {}

    if (!configUntested.manager.address ||
        typeof configUntested.manager.address !== 'object'
    ) {
      throw new Error(`Config file "${filePath}" have invalid property {object} "manager.address" = {${typeof configUntested.manager.address}} "${utils.toString(configUntested.manager.address)}"`)
    }
    config.manager.address = {}

    if (!validator.isIP(configUntested.manager.address.ip)) {
      throw new Error(`Config file "${filePath}" have invalid property {IP} "manager.address.ip" = {${typeof configUntested.manager.address.ip}} "${utils.toString(configUntested.manager.address.ip)}"`)
    }
    config.manager.address.ip = configUntested.manager.address.ip

    if (!validator.isInt(`${configUntested.manager.address.port}`, {min: 0})) {
      throw new Error(`Config file "${filePath}" have invalid property {port} "manager.address.port" = {${typeof configUntested.manager.address.port}} "${utils.toString(configUntested.manager.address.port)}"`)
    }
    config.manager.address.port = configUntested.manager.address.port

    if (!configUntested.manager.instance ||
        typeof configUntested.manager.instance !== 'object'
    ) {
      throw new Error(`Config file "${filePath}" have invalid property {object} "manager.instance" = {${typeof configUntested.manager.instance}} "${utils.toString(configUntested.manager.instance)}"`)
    }
    config.manager.instance = {}

    if (typeof configUntested.manager.instance.namePrefix !== 'string') {
      throw new Error(`Config file "${filePath}" have invalid property {String} "manager.instance.namePrefix" = {${typeof configUntested.manager.instance.namePrefix}} "${utils.toString(configUntested.manager.instance.namePrefix)}"`)
    }
    config.manager.instance.namePrefix = configUntested.manager.instance.namePrefix

    if (!configUntested.manager.stats ||
        typeof configUntested.manager.stats !== 'object'
    ) {
      throw new Error(`Config file "${filePath}" have invalid property {object} "manager.stats" = {${typeof configUntested.manager.stats}} "${utils.toString(configUntested.manager.stats)}"`)
    }
    config.manager.stats = {}

    if (!validator.isTimeout(`${configUntested.manager.stats.oldestStatsTimestamp}`)) {
      throw new Error(`Config file "${filePath}" have invalid property {Timeout} "manager.stats.oldestStatsTimestamp" = {${typeof configUntested.manager.stats.oldestStatsTimestamp}} "${utils.toString(configUntested.manager.stats.oldestStatsTimestamp)}"`)
    }
    config.manager.stats.oldestStatsTimestamp = configUntested.manager.stats.oldestStatsTimestamp

    if (!configUntested.services ||
        typeof configUntested.services !== 'object'
    ) {
      throw new Error(`Config file "${filePath}" have invalid property {object} "services" = {${typeof configUntested.services}} "${utils.toString(configUntested.services)}"`)
    }
    config.services = {}

    if (!configUntested.services['fibonacci-number'] ||
        typeof configUntested.services['fibonacci-number'] !== 'object'
    ) {
      throw new Error(`Config file "${filePath}" have invalid property {object} "services['fibonacci-number']" = {${typeof configUntested.services['fibonacci-number']}} "${utils.toString(configUntested.services['fibonacci-number'])}"`)
    }
    config.services['fibonacci-number'] = {}

    if (!configUntested.services['fibonacci-number'].address ||
        typeof configUntested.services['fibonacci-number'].address !== 'object'
    ) {
      throw new Error(`Config file "${filePath}" have invalid property {object} "services['fibonacci-number'].address" = {${typeof configUntested.services['fibonacci-number'].address}} "${utils.toString(configUntested.services['fibonacci-number'].address)}"`)
    }
    config.services['fibonacci-number'].address = {}

    if (!validator.isInt(`${configUntested.services['fibonacci-number'].address.defaultPort}`, {min: 0})) {
      throw new Error(`Config file "${filePath}" have invalid property {port} "services['fibonacci-number'].address.defaultPort" = {${typeof configUntested.services['fibonacci-number'].address.defaultPort}} "${utils.toString(configUntested.services['fibonacci-number'].address.defaultPort)}"`)
    }
    config.services['fibonacci-number'].address.defaultPort = configUntested.services['fibonacci-number'].address.defaultPort

    if (!configUntested.services['fibonacci-number'].location ||
        typeof configUntested.services['fibonacci-number'].location !== 'string'
    ) {
      throw new Error(`Config file "${filePath}" have invalid property non-empty {String} "services['fibonacci-number'].location" = {${typeof configUntested.services['fibonacci-number'].location}} "${utils.toString(configUntested.services['fibonacci-number'].location)}"`)
    }
    config.services['fibonacci-number'].location = configUntested.services['fibonacci-number'].location

    if (typeof configUntested.services['fibonacci-number'].totalInitialInstances !== 'number' ||
        configUntested.services['fibonacci-number'].totalInitialInstances < 0
    ) {
      throw new Error(`Config file "${filePath}" have invalid property non-negative {Number} "services['fibonacci-number'].totalInitialInstances" = {${typeof configUntested.services['fibonacci-number'].totalInitialInstances}} "${utils.toString(configUntested.services['fibonacci-number'].totalInitialInstances)}"`)
    }
    config.services['fibonacci-number'].totalInitialInstances = configUntested.services['fibonacci-number'].totalInitialInstances

    if (typeof configUntested.services['fibonacci-number'].maximumRunningInstances !== 'number' ||
        configUntested.services['fibonacci-number'].maximumRunningInstances < 0
    ) {
      throw new Error(`Config file "${filePath}" have invalid property non-negative {Number} "services['fibonacci-number'].maximumRunningInstances" = {${typeof configUntested.services['fibonacci-number'].maximumRunningInstances}} "${utils.toString(configUntested.services['fibonacci-number'].maximumRunningInstances)}"`)
    }
    config.services['fibonacci-number'].maximumRunningInstances = configUntested.services['fibonacci-number'].maximumRunningInstances

    if (!configUntested.services['prime-number'] ||
        typeof configUntested.services['prime-number'] !== 'object'
    ) {
      throw new Error(`Config file "${filePath}" have invalid property {object} "services['prime-number']" = {${typeof configUntested.services['prime-number']}} "${utils.toString(configUntested.services['prime-number'])}"`)
    }
    config.services['prime-number'] = {}

    if (!configUntested.services['prime-number'].address ||
        typeof configUntested.services['prime-number'].address !== 'object'
    ) {
      throw new Error(`Config file "${filePath}" have invalid property {object} "services['prime-number'].address" = {${typeof configUntested.services['prime-number'].address}} "${utils.toString(configUntested.services['prime-number'].address)}"`)
    }
    config.services['prime-number'].address = {}

    if (!validator.isInt(`${configUntested.services['prime-number'].address.defaultPort}`, {min: 0})) {
      throw new Error(`Config file "${filePath}" have invalid property {port} "services['prime-number'].address.defaultPort" = {${typeof configUntested.services['prime-number'].address.defaultPort}} "${utils.toString(configUntested.services['prime-number'].address.defaultPort)}"`)
    }
    config.services['prime-number'].address.defaultPort = configUntested.services['prime-number'].address.defaultPort

    if (!configUntested.services['prime-number'].location ||
        typeof configUntested.services['prime-number'].location !== 'string'
    ) {
      throw new Error(`Config file "${filePath}" have invalid property non-empty {String} "services['prime-number'].location" = {${typeof configUntested.services['prime-number'].location}} "${utils.toString(configUntested.services['prime-number'].location)}"`)
    }
    config.services['prime-number'].location = configUntested.services['prime-number'].location

    if (typeof configUntested.services['prime-number'].totalInitialInstances !== 'number' ||
        configUntested.services['prime-number'].totalInitialInstances < 0
    ) {
      throw new Error(`Config file "${filePath}" have invalid property non-negative {Number} "services['prime-number'].totalInitialInstances" = {${typeof configUntested.services['prime-number'].totalInitialInstances}} "${utils.toString(configUntested.services['prime-number'].totalInitialInstances)}"`)
    }
    config.services['prime-number'].totalInitialInstances = configUntested.services['prime-number'].totalInitialInstances

    if (typeof configUntested.services['prime-number'].maximumRunningInstances !== 'number' ||
        configUntested.services['prime-number'].maximumRunningInstances < 0
    ) {
      throw new Error(`Config file "${filePath}" have invalid property non-negative {Number} "services['prime-number'].maximumRunningInstances" = {${typeof configUntested.services['prime-number'].maximumRunningInstances}} "${utils.toString(configUntested.services['prime-number'].maximumRunningInstances)}"`)
    }
    config.services['prime-number'].maximumRunningInstances = configUntested.services['prime-number'].maximumRunningInstances

    if (!configUntested.services['combo-number'] ||
        typeof configUntested.services['combo-number'] !== 'object'
    ) {
      throw new Error(`Config file "${filePath}" have invalid property {object} "services['combo-number']" = {${typeof configUntested.services['combo-number']}} "${utils.toString(configUntested.services['combo-number'])}"`)
    }
    config.services['combo-number'] = {}

    if (!configUntested.services['combo-number'].address ||
        typeof configUntested.services['combo-number'].address !== 'object'
    ) {
      throw new Error(`Config file "${filePath}" have invalid property {object} "services['combo-number'].address" = {${typeof configUntested.services['combo-number'].address}} "${utils.toString(configUntested.services['combo-number'].address)}"`)
    }
    config.services['combo-number'].address = {}

    if (!validator.isInt(`${configUntested.services['combo-number'].address.defaultPort}`, {min: 0})) {
      throw new Error(`Config file "${filePath}" have invalid property {port} "services['combo-number'].address.defaultPort" = {${typeof configUntested.services['combo-number'].address.defaultPort}} "${utils.toString(configUntested.services['combo-number'].address.defaultPort)}"`)
    }
    config.services['combo-number'].address.defaultPort = configUntested.services['combo-number'].address.defaultPort

    if (!configUntested.services['combo-number'].location ||
        typeof configUntested.services['combo-number'].location !== 'string'
    ) {
      throw new Error(`Config file "${filePath}" have invalid property non-empty {String} "services['combo-number'].location" = {${typeof configUntested.services['combo-number'].location}} "${utils.toString(configUntested.services['combo-number'].location)}"`)
    }
    config.services['combo-number'].location = configUntested.services['combo-number'].location

    if (typeof configUntested.services['combo-number'].totalInitialInstances !== 'number' ||
        configUntested.services['combo-number'].totalInitialInstances < 0
    ) {
      throw new Error(`Config file "${filePath}" have invalid property non-negative {Number} "services['combo-number'].totalInitialInstances" = {${typeof configUntested.services['combo-number'].totalInitialInstances}} "${utils.toString(configUntested.services['combo-number'].totalInitialInstances)}"`)
    }
    config.services['combo-number'].totalInitialInstances = configUntested.services['combo-number'].totalInitialInstances

    if (typeof configUntested.services['combo-number'].maximumRunningInstances !== 'number' ||
        configUntested.services['combo-number'].maximumRunningInstances < 0
    ) {
      throw new Error(`Config file "${filePath}" have invalid property non-negative {Number} "services['combo-number'].maximumRunningInstances" = {${typeof configUntested.services['combo-number'].maximumRunningInstances}} "${utils.toString(configUntested.services['combo-number'].maximumRunningInstances)}"`)
    }
    config.services['combo-number'].maximumRunningInstances = configUntested.services['combo-number'].maximumRunningInstances

    if (!configUntested.services['random-string'] ||
        typeof configUntested.services['random-string'] !== 'object'
    ) {
      throw new Error(`Config file "${filePath}" have invalid property {object} "services['random-string']" = {${typeof configUntested.services['random-string']}} "${utils.toString(configUntested.services['random-string'])}"`)
    }
    config.services['random-string'] = {}

    if (!configUntested.services['random-string'].address ||
        typeof configUntested.services['random-string'].address !== 'object'
    ) {
      throw new Error(`Config file "${filePath}" have invalid property {object} "services['random-string'].address" = {${typeof configUntested.services['random-string'].address}} "${utils.toString(configUntested.services['random-string'].address)}"`)
    }
    config.services['random-string'].address = {}

    if (!validator.isInt(`${configUntested.services['random-string'].address.defaultPort}`, {min: 0})) {
      throw new Error(`Config file "${filePath}" have invalid property {port} "services['random-string'].address.defaultPort" = {${typeof configUntested.services['random-string'].address.defaultPort}} "${utils.toString(configUntested.services['random-string'].address.defaultPort)}"`)
    }
    config.services['random-string'].address.defaultPort = configUntested.services['random-string'].address.defaultPort

    if (!configUntested.services['random-string'].location ||
        typeof configUntested.services['random-string'].location !== 'string'
    ) {
      throw new Error(`Config file "${filePath}" have invalid property non-empty {String} "services['random-string'].location" = {${typeof configUntested.services['random-string'].location}} "${utils.toString(configUntested.services['random-string'].location)}"`)
    }
    config.services['random-string'].location = configUntested.services['random-string'].location

    if (typeof configUntested.services['random-string'].totalInitialInstances !== 'number' ||
        configUntested.services['random-string'].totalInitialInstances < 0
    ) {
      throw new Error(`Config file "${filePath}" have invalid property non-negative {Number} "services['random-string'].totalInitialInstances" = {${typeof configUntested.services['random-string'].totalInitialInstances}} "${utils.toString(configUntested.services['random-string'].totalInitialInstances)}"`)
    }
    config.services['random-string'].totalInitialInstances = configUntested.services['random-string'].totalInitialInstances

    if (typeof configUntested.services['random-string'].maximumRunningInstances !== 'number' ||
        configUntested.services['random-string'].maximumRunningInstances < 0
    ) {
      throw new Error(`Config file "${filePath}" have invalid property non-negative {Number} "services['random-string'].maximumRunningInstances" = {${typeof configUntested.services['random-string'].maximumRunningInstances}} "${utils.toString(configUntested.services['random-string'].maximumRunningInstances)}"`)
    }
    config.services['random-string'].maximumRunningInstances = configUntested.services['random-string'].maximumRunningInstances

    /* Be sure no one will be able to alter the set and valid configuration */
    return utils.recursiveFreezeObject(config)
  } catch (error) {
    throw new Error(`Unable to get config: ${error.message}`)
  }
}

/*
  Give access not only to the default configuration but give access to the mechanism as well
  so the callee can produce separate configs if find suitable
*/
module.exports = getConfig()
